# vim: set sts=2 ts=8 sw=2 tw=99 et ft=python:
import os

binary = Telephone.Library(builder, 'telephone.ext')
Telephone.ConfigureForExtension(builder, binary.compiler)

# See: https://gcc.gnu.org/onlinedocs/libstdc++/manual/using_dual_abi.html
# Valve currently compile using an old GCC / libstd++ that does not use the new ABI,
# force the old one here so that our std::string is correct when reading from CCLCMsg_VoiceData.
# (Note: I build release builds with gcc-4.6 so this isn't strictly required,
#  but be future proof because this was a nightmare to figure out.)
if binary.compiler.like('gcc'):
  binary.compiler.defines += ['_GLIBCXX_USE_CXX11_ABI=0']

binary.compiler.defines += ['SOURCEMOD_BUILD']

binary.compiler.includes += [
  os.path.join(builder.sourcePath, 'libwebsockets', 'include'),
]

binary.sources += [
  'extension.cpp',
  os.path.join(Telephone.sm_root, 'public', 'smsdk_ext.cpp'),
  os.path.join(Telephone.sm_root, 'public', 'CDetour', 'detours.cpp'),
  os.path.join(Telephone.sm_root, 'public', 'asm', 'asm.c'),
]

if builder.target_platform == 'windows':
  binary.compiler.postlink += [
    os.path.join(builder.sourcePath, 'libwebsockets', 'lib', 'websockets_static.lib'),
    os.path.join(builder.sourcePath, 'libwebsockets', 'lib', 'mbedtls.lib'),
    os.path.join(builder.sourcePath, 'libwebsockets', 'lib', 'mbedx509.lib'),
    os.path.join(builder.sourcePath, 'libwebsockets', 'lib', 'mbedcrypto.lib'),
  ]
  binary.compiler.linkflags += [
    'ws2_32.lib',
    'Iphlpapi.lib',
  ]
else:
  binary.compiler.postlink += [
    os.path.join(builder.sourcePath, 'libwebsockets', 'lib', 'libwebsockets.a'),
    os.path.join(builder.sourcePath, 'libwebsockets', 'lib', 'libmbedtls.a'),
    os.path.join(builder.sourcePath, 'libwebsockets', 'lib', 'libmbedx509.a'),
    os.path.join(builder.sourcePath, 'libwebsockets', 'lib', 'libmbedcrypto.a'),
  ]

Telephone.extensions += [builder.Add(binary)]
