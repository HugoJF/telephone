# vim: set sts=2 ts=8 sw=2 tw=99 et ft=python:
import os

celtDecoder = Telephone.StaticLibrary(builder, 'libcelt')

celtDecoder.compiler.defines += ['HAVE_CONFIG_H']

if celtDecoder.compiler.like('gcc'):
  celtDecoder.compiler.cflags += [
    '-Wno-error',
    '-Wno-parentheses',
  ]

celtDecoder.compiler.includes += [
  os.path.join(builder.sourcePath, 'decoders', 'celt', 'include'),
  os.path.join(builder.sourcePath, 'decoders', 'celt', 'src'),
]

celtDecoder.sources += [
  os.path.join(builder.sourcePath, 'decoders', 'celt', 'src', 'bands.c'),
  os.path.join(builder.sourcePath, 'decoders', 'celt', 'src', 'celt.c'),
  os.path.join(builder.sourcePath, 'decoders', 'celt', 'src', 'cwrs.c'),
  os.path.join(builder.sourcePath, 'decoders', 'celt', 'src', 'entcode.c'),
  os.path.join(builder.sourcePath, 'decoders', 'celt', 'src', 'entdec.c'),
  os.path.join(builder.sourcePath, 'decoders', 'celt', 'src', 'entenc.c'),
  os.path.join(builder.sourcePath, 'decoders', 'celt', 'src', 'header.c'),
  os.path.join(builder.sourcePath, 'decoders', 'celt', 'src', 'kiss_fft.c'),
  os.path.join(builder.sourcePath, 'decoders', 'celt', 'src', 'laplace.c'),
  os.path.join(builder.sourcePath, 'decoders', 'celt', 'src', 'mathops.c'),
  os.path.join(builder.sourcePath, 'decoders', 'celt', 'src', 'mdct.c'),
  os.path.join(builder.sourcePath, 'decoders', 'celt', 'src', 'modes.c'),
  os.path.join(builder.sourcePath, 'decoders', 'celt', 'src', 'pitch.c'),
  os.path.join(builder.sourcePath, 'decoders', 'celt', 'src', 'plc.c'),
  os.path.join(builder.sourcePath, 'decoders', 'celt', 'src', 'quant_bands.c'),
  os.path.join(builder.sourcePath, 'decoders', 'celt', 'src', 'rate.c'),
  os.path.join(builder.sourcePath, 'decoders', 'celt', 'src', 'vq.c'),
]

celtDecoderBinary = builder.Add(celtDecoder).binary

binary = Telephone.Program(builder, 'telephone-client')

if binary.compiler.like('gcc'):
  binary.compiler.cflags += [
    '-Wno-error=deprecated-declarations',
  ]

binary.compiler.includes += [
  os.path.join(Telephone.sm_root, 'public'),
  os.path.join(Telephone.sm_root, 'public', 'amtl'),
  os.path.join(builder.sourcePath, 'libwebsockets', 'include'),
  os.path.join(builder.sourcePath, 'decoders', 'celt', 'include'),
  os.path.join(builder.sourcePath, 'decoders', 'celt', 'src'),
]

binary.sources += [
  'client.cpp',
]

binary.compiler.postlink += [
  celtDecoderBinary,
]

if builder.target_platform == 'windows':
  binary.compiler.postlink += [
    os.path.join(builder.sourcePath, 'libwebsockets', 'lib', 'websockets_static.lib'),
    os.path.join(builder.sourcePath, 'libwebsockets', 'lib', 'mbedtls.lib'),
    os.path.join(builder.sourcePath, 'libwebsockets', 'lib', 'mbedx509.lib'),
    os.path.join(builder.sourcePath, 'libwebsockets', 'lib', 'mbedcrypto.lib'),
  ]
  binary.compiler.linkflags += [
    'ws2_32.lib',
    'Iphlpapi.lib',
  ]
else:
  binary.compiler.postlink += [
    os.path.join(builder.sourcePath, 'libwebsockets', 'lib', 'libwebsockets.a'),
    os.path.join(builder.sourcePath, 'libwebsockets', 'lib', 'libmbedtls.a'),
    os.path.join(builder.sourcePath, 'libwebsockets', 'lib', 'libmbedx509.a'),
    os.path.join(builder.sourcePath, 'libwebsockets', 'lib', 'libmbedcrypto.a'),
  ]

builder.Add(binary)
